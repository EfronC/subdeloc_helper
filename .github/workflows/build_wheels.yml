# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Build wheels

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug

permissions:
  contents: read

jobs:
  build:
    name: Build wheel for ${{ matrix.buildplat[0] }}
    runs-on: ${{ matrix.buildplat[0] }}
    strategy:
      matrix:
        buildplat:
        - [ubuntu-latest, manylinux_x86_64]
        #- [ubuntu-latest, manylinux_aarch64]
        - [windows-latest, win_amd64]
        - [macos-latest, macosx_*]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.20.0
        with:
          output-dir: wheelhouse
        env:
          MACOSX_DEPLOYMENT_TARGET: 14.0
          CIBW_BUILD: cp3*-${{ matrix.buildplat[1] }}
          CIBW_SKIP: "cp34-* cp35-* cp36-* cp37-*"
          CIBW_BEFORE_BUILD: >
            pip install setuptools wheel Cython
          CIBW_BEFORE_ALL_WINDOWS: >
            C:\vcpkg\bootstrap-vcpkg.bat &&
            C:\vcpkg\vcpkg integrate install &&
            C:\vcpkg\vcpkg install libass &&
            C:\vcpkg\vcpkg install jsoncpp
          CIBW_BEFORE_ALL_LINUX: >
            yum update &&
            yum install -y libass-devel jsoncpp-devel
          CIBW_BEFORE_ALL_MACOS: >
            brew install libass jsoncpp
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: >
            pip install delvewheel &&
            delvewheel repair --add-path "C:\vcpkg\installed\x64-windows\bin" -w {dest_dir} {wheel}
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: >
            auditwheel repair -w {dest_dir} {wheel}
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: >
            pip install delocate &&
            delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: built-wheels-${{ matrix.buildplat[0] }}
          path: ./wheelhouse/*.whl

  upload_to_pypi:
    name: Upload release to PyPI
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write 
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: built-wheels-*
          merge-multiple: true

      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
